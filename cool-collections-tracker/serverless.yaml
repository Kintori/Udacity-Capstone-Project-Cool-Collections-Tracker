service:
  name: cool-collections-tracker

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs14.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    COLLECTIONS_TABLE: Collections-${self:provider.stage}
    COLLECTIONS_CREATED_AT_INDEX: CollectionsCreatedAtIndex
    COLLECTED_ITEMS_TABLE: Collected-items-${self:provider.stage}
    COLLECTED_ITEMS_CREATED_AT_INDEX: CollectedItemsCreatedAtIndex
    COLLECTED_ITEMS_COLLECTION_ID_INDEX: CollectedItemsCollectionIdIndex
    ATTACHMENT_S3_BUCKET: cool-collections-tracker-images-proft-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: "*"

functions:

  Auth:
    handler: src/functions/auth/auth0Authorizer.handler

  GetCollections:
    handler: src/functions/http/getCollections.handler
    events:
      - http:
          method: get
          path: collections
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTIONS_TABLE}

  GetCollection:
    handler: src/functions/http/getCollection.handler
    events:
      - http:
          method: get
          path: collections/{collectionId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTIONS_TABLE}

  CreateCollection:
    handler: src/functions/http/createCollection.handler
    events:
      - http:
          method: post
          path: collections
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-collection-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTIONS_TABLE}

  UpdateCollection:
    handler: src/functions/http/updateCollection.handler
    events:
      - http:
          method: patch
          path: collections/{collectionId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-collection-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTIONS_TABLE}

  DeleteCollection:
    handler: src/functions/http/deleteCollection.handler
    events:
      - http:
          method: delete
          path: collections/{collectionId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTIONS_TABLE}

  GetCollectedItems:
    handler: src/functions/http/getCollectedItems.handler
    events:
      - http:
          method: get
          path: collecteditems/{id} # id is collectionId
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTED_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTED_ITEMS_TABLE}/index/${self:provider.environment.COLLECTED_ITEMS_COLLECTION_ID_INDEX}

  GetCollectedItem:
    handler: src/functions/http/getCollectedItem.handler
    events:
      - http:
          method: get
          path: collecteditem/{id} # id is itemId
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTED_ITEMS_TABLE}

  CreateCollectedItem:
    handler: src/functions/http/createCollectedItem.handler
    events:
      - http:
          method: post
          path: collecteditems/{id} # id is collectionId
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-collected-item-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTED_ITEMS_TABLE}

  UpdateCollectedItem:
    handler: src/functions/http/updateCollectedItem.handler
    events:
      - http:
          method: patch
          path: collecteditems/{id} # id is itemId
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-collected-item-model.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTED_ITEMS_TABLE}

  DeleteCollectedItem:
    handler: src/functions/http/deleteCollectedItem.handler
    events:
      - http:
          method: delete
          path: collecteditems/{id} # id is itemId
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTED_ITEMS_TABLE}

  GenerateUploadUrl:
    handler: src/functions/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: attachment/collecteditems/{itemId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COLLECTED_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    CollectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: collectionId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: collectionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COLLECTIONS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COLLECTIONS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    CollectedItemsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: collectionId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COLLECTED_ITEMS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COLLECTED_ITEMS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COLLECTED_ITEMS_COLLECTION_ID_INDEX}
            KeySchema:
              - AttributeName: collectionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket