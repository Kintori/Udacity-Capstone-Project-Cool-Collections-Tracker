{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AuthLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-Auth"
      }
    },
    "GetCollectionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-GetCollections"
      }
    },
    "GetCollectionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-GetCollection"
      }
    },
    "CreateCollectionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-CreateCollection"
      }
    },
    "UpdateCollectionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-UpdateCollection"
      }
    },
    "DeleteCollectionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-DeleteCollection"
      }
    },
    "GetCollectedItemsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-GetCollectedItems"
      }
    },
    "GetCollectedItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-GetCollectedItem"
      }
    },
    "CreateCollectedItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-CreateCollectedItem"
      }
    },
    "UpdateCollectedItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-UpdateCollectedItem"
      }
    },
    "DeleteCollectedItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-DeleteCollectedItem"
      }
    },
    "GenerateUploadUrlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cool-collections-tracker-dev-GenerateUploadUrl"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AuthLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/auth/auth0Authorizer.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-Auth",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AuthLogGroup"
      ]
    },
    "GetCollectionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/getCollections.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-GetCollections",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "GetCollectionsIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCollectionsIamRoleLambdaExecution",
        "GetCollectionsLogGroup"
      ]
    },
    "GetCollectionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/getCollection.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-GetCollection",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "GetCollectionIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCollectionIamRoleLambdaExecution",
        "GetCollectionLogGroup"
      ]
    },
    "CreateCollectionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/createCollection.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-CreateCollection",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CreateCollectionIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateCollectionIamRoleLambdaExecution",
        "CreateCollectionLogGroup"
      ]
    },
    "UpdateCollectionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/updateCollection.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-UpdateCollection",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "UpdateCollectionIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCollectionIamRoleLambdaExecution",
        "UpdateCollectionLogGroup"
      ]
    },
    "DeleteCollectionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/deleteCollection.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-DeleteCollection",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "DeleteCollectionIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteCollectionIamRoleLambdaExecution",
        "DeleteCollectionLogGroup"
      ]
    },
    "GetCollectedItemsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/getCollectedItems.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-GetCollectedItems",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "GetCollectedItemsIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCollectedItemsIamRoleLambdaExecution",
        "GetCollectedItemsLogGroup"
      ]
    },
    "GetCollectedItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/getCollectedItem.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-GetCollectedItem",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "GetCollectedItemIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCollectedItemIamRoleLambdaExecution",
        "GetCollectedItemLogGroup"
      ]
    },
    "CreateCollectedItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/createCollectedItem.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-CreateCollectedItem",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "CreateCollectedItemIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateCollectedItemIamRoleLambdaExecution",
        "CreateCollectedItemLogGroup"
      ]
    },
    "UpdateCollectedItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/updateCollectedItem.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-UpdateCollectedItem",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "UpdateCollectedItemIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateCollectedItemIamRoleLambdaExecution",
        "UpdateCollectedItemLogGroup"
      ]
    },
    "DeleteCollectedItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/deleteCollectedItem.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-DeleteCollectedItem",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "DeleteCollectedItemIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteCollectedItemIamRoleLambdaExecution",
        "DeleteCollectedItemLogGroup"
      ]
    },
    "GenerateUploadUrlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/cool-collections-tracker.zip"
        },
        "Handler": "src/functions/http/generateUploadUrl.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "cool-collections-tracker-dev-GenerateUploadUrl",
        "MemorySize": 1024,
        "Timeout": 6,
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Environment": {
          "Variables": {
            "COLLECTIONS_TABLE": "Collections-dev",
            "COLLECTIONS_CREATED_AT_INDEX": "CollectionsCreatedAtIndex",
            "COLLECTED_ITEMS_TABLE": "Collected-items-dev",
            "COLLECTED_ITEMS_CREATED_AT_INDEX": "CollectedItemsCreatedAtIndex",
            "COLLECTED_ITEMS_COLLECTION_ID_INDEX": "CollectedItemsCollectionIdIndex",
            "ATTACHMENT_S3_BUCKET": "cool-collections-tracker-images-proft-dev",
            "SIGNED_URL_EXPIRATION": "300"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "GenerateUploadUrlIamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GenerateUploadUrlIamRoleLambdaExecution",
        "GenerateUploadUrlLogGroup"
      ]
    },
    "GetCollectionLambdaVersionEFTCvfHpTQeRczFkPdyPSNC8E84p8lx5i3TAbW41xk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCollectionLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "CreateCollectionLambdaVersionzloaEtS8OGee4NMIcsVSLGtoeBjPTjJyOjTxHviwk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCollectionLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "GetCollectionsLambdaVersion2uHM1zbVt06VpIInVbeUlim5vWiFfg86nZgrkhNIAQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCollectionsLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "AuthLambdaVersionqbFIv5rYupkuXfnpVWjLMbF7Q7nMfZypBv0ONEu3K4I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "CreateCollectedItemLambdaVersion2wLrXfR6cLbu6q2t2EX4DNMlgZ8CTRRSN3E12blXLM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateCollectedItemLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "UpdateCollectionLambdaVersionnZR2LXmdvRL5xicS4kELWJ378DAnvSGK9nI5WoM8I8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCollectionLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "DeleteCollectedItemLambdaVersionYZbwJUOBBstn8VqhPxWTdGN8HnXqp0dDVbfFa2VM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteCollectedItemLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "GetCollectedItemsLambdaVersionkuRYaucxIQPPR2TvEzTD5XsknOWfT7tM6kV1z2jpksQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCollectedItemsLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "GetCollectedItemLambdaVersionk77wkRxJ91IOqSb05ueD3nNGyywyngB3mnXXheiNc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCollectedItemLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "UpdateCollectedItemLambdaVersionRL7HPNkMw48FMTn49FL7EcSy1aTqQHBafDStf3EA4c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateCollectedItemLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "GenerateUploadUrlLambdaVersionubwU10JOaRyIKijvKFZkUPdQ60AKh6aTRlVNYuBggl8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GenerateUploadUrlLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "DeleteCollectionLambdaVersiontCPmfrhev9Uvg7eKAqS07KEayNTNceVT1sIVflI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteCollectionLambdaFunction"
        },
        "CodeSha256": "Uq3LH3UsAqMnVW5TBV2jPPaKuHZcHng32unUIfD8aw4="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-cool-collections-tracker",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceCollections": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "collections",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionsCollectionidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollections"
        },
        "PathPart": "{collectionId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollecteditems": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "collecteditems",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollecteditemsIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollecteditems"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollecteditem": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "collecteditem",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollecteditemIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollecteditem"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAttachment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "attachment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAttachmentCollecteditems": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAttachment"
        },
        "PathPart": "collecteditems",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAttachmentCollecteditemsItemidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAttachmentCollecteditems"
        },
        "PathPart": "{itemId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollectionsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollections"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollectionsCollectionidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PATCH,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionsCollectionidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollecteditemsIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PATCH,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollecteditemsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollecteditemIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollecteditemIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAttachmentCollecteditemsItemidVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAttachmentCollecteditemsItemidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollectionsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollections"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCollectionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCollectionsCollectionidVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionsCollectionidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCollectionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCollectionsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollections"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateCollectionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayCoolcollectionstrackerRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodCollectionsPostApplicationJsonModel"
          }
        }
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCollectionsCollectionidVarPatch": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PATCH",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionsCollectionidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateCollectionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayCoolcollectionstrackerRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodCollectionsCollectionidVarPatchApplicationJsonModel"
          }
        }
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCollectionsCollectionidVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionsCollectionidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteCollectionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCollecteditemsIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollecteditemsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCollectedItemsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCollecteditemIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollecteditemIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCollectedItemLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCollecteditemsIdVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollecteditemsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateCollectedItemLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayCoolcollectionstrackerRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodCollecteditemsIdVarPostApplicationJsonModel"
          }
        }
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCollecteditemsIdVarPatch": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PATCH",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollecteditemsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateCollectedItemLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayCoolcollectionstrackerRequestValidator"
        },
        "RequestModels": {
          "application/json": {
            "Ref": "ApiGatewayMethodCollecteditemsIdVarPatchApplicationJsonModel"
          }
        }
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodCollecteditemsIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollecteditemsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteCollectedItemLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAttachmentCollecteditemsItemidVarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAttachmentCollecteditemsItemidVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GenerateUploadUrlLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthApiGatewayAuthorizer"
    },
    "ApiGatewayCoolcollectionstrackerRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "cool-collections-tracker-dev | Validate request body and querystring parameters"
      }
    },
    "ApiGatewayMethodCollectionsPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "group",
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9+$]",
              "minLength": 1,
              "maxLength": 100
            },
            "description": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9+$]",
              "minLength": 1,
              "maxLength": 500
            }
          },
          "required": [
            "title",
            "description"
          ],
          "additionalProperties": false
        }
      }
    },
    "ApiGatewayMethodCollectionsCollectionidVarPatchApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "group",
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9+$]",
              "minLength": 1,
              "maxLength": 100
            },
            "description": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9+$]",
              "minLength": 1,
              "maxLength": 500
            }
          },
          "required": [
            "title",
            "description"
          ],
          "additionalProperties": false
        }
      }
    },
    "ApiGatewayMethodCollecteditemsIdVarPostApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "group",
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9+$]",
              "minLength": 1,
              "maxLength": 100
            },
            "description": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9+$]",
              "minLength": 1,
              "maxLength": 500
            }
          },
          "required": [
            "title",
            "description"
          ],
          "additionalProperties": false
        }
      }
    },
    "ApiGatewayMethodCollecteditemsIdVarPatchApplicationJsonModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "group",
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9+$]",
              "minLength": 1,
              "maxLength": 100
            },
            "description": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9+$]",
              "minLength": 1,
              "maxLength": 500
            }
          },
          "required": [
            "title",
            "description"
          ],
          "additionalProperties": false
        }
      }
    },
    "AuthApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "IdentitySource": "method.request.header.Authorization",
        "Name": "Auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AuthLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1634027038039": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodCollectionsOptions",
        "ApiGatewayMethodCollectionsCollectionidVarOptions",
        "ApiGatewayMethodCollecteditemsIdVarOptions",
        "ApiGatewayMethodCollecteditemIdVarOptions",
        "ApiGatewayMethodAttachmentCollecteditemsItemidVarOptions",
        "ApiGatewayMethodCollectionsGet",
        "ApiGatewayMethodCollectionsCollectionidVarGet",
        "ApiGatewayMethodCollectionsPost",
        "ApiGatewayMethodCollectionsCollectionidVarPatch",
        "ApiGatewayMethodCollectionsCollectionidVarDelete",
        "ApiGatewayMethodCollecteditemsIdVarGet",
        "ApiGatewayMethodCollecteditemIdVarGet",
        "ApiGatewayMethodCollecteditemsIdVarPost",
        "ApiGatewayMethodCollecteditemsIdVarPatch",
        "ApiGatewayMethodCollecteditemsIdVarDelete",
        "ApiGatewayMethodAttachmentCollecteditemsItemidVarPost"
      ]
    },
    "GetCollectionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCollectionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AuthLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCollectionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCollectionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateCollectionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCollectionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateCollectionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCollectionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteCollectionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteCollectionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCollectedItemsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCollectedItemsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCollectedItemLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCollectedItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateCollectedItemLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateCollectedItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateCollectedItemLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateCollectedItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteCollectedItemLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteCollectedItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GenerateUploadUrlLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GenerateUploadUrlLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/api-gateway/cool-collections-tracker-dev"
      }
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "cool-collections-tracker",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "apigateway:*::/account"
                      ]
                    ]
                  },
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cool-collections-tracker/dev/1634027178453-2021-10-12T08:26:18.453Z/custom-resources.zip"
        },
        "FunctionName": "cool-collections-tracker-dev-custom-resource-apigw-cw-role",
        "Handler": "apiGatewayCloudWatchRole/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs12.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "GetCollectionsIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-GetCollections:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collections-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "GetCollections",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "GetCollectionIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-GetCollection:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collections-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "GetCollection",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "CreateCollectionIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-CreateCollection:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collections-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "CreateCollection",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "UpdateCollectionIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-UpdateCollection:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collections-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "UpdateCollection",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "DeleteCollectionIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-DeleteCollection:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collections-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "DeleteCollection",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "GetCollectedItemsIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-GetCollectedItems:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collected-items-dev"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collected-items-dev/index/CollectedItemsCollectionIdIndex"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "GetCollectedItems",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "GetCollectedItemIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-GetCollectedItem:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collected-items-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "GetCollectedItem",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "CreateCollectedItemIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-CreateCollectedItem:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collected-items-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "CreateCollectedItem",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "UpdateCollectedItemIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-UpdateCollectedItem:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collected-items-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "UpdateCollectedItem",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "DeleteCollectedItemIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-DeleteCollectedItem:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collected-items-dev"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "DeleteCollectedItem",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "GenerateUploadUrlIamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cool-collections-tracker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cool-collections-tracker-dev-GenerateUploadUrl:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/Collected-items-dev"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::cool-collections-tracker-images-proft-dev/*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cool-collections-tracker",
              "dev",
              "GenerateUploadUrl",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "ManagedPolicyArns": []
      }
    },
    "GatewayResponseDefault4XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,OPTIONS,POST'"
        },
        "ResponseType": "DEFAULT_4XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "CollectionsDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "collectionId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "createdAt",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "collectionId",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "Collections-dev",
        "LocalSecondaryIndexes": [
          {
            "IndexName": "CollectionsCreatedAtIndex",
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "createdAt",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    },
    "CollectedItemsDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "itemId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "collectionId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "createdAt",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "itemId",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "Collected-items-dev",
        "LocalSecondaryIndexes": [
          {
            "IndexName": "CollectedItemsCreatedAtIndex",
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "createdAt",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "CollectedItemsCollectionIdIndex",
            "KeySchema": [
              {
                "AttributeName": "collectionId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    },
    "AttachmentsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "cool-collections-tracker-images-proft-dev",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedOrigins": [
                "*"
              ],
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE",
                "HEAD"
              ],
              "MaxAge": 3000
            }
          ]
        }
      }
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "MyPolicy",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadForGetBucketObjects",
              "Effect": "Allow",
              "Principal": "*",
              "Action": [
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Resource": "arn:aws:s3:::cool-collections-tracker-images-proft-dev/*"
            }
          ]
        },
        "Bucket": {
          "Ref": "AttachmentsBucket"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetCollectionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCollectionLambdaVersionEFTCvfHpTQeRczFkPdyPSNC8E84p8lx5i3TAbW41xk"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-GetCollectionLambdaFunctionQualifiedArn"
      }
    },
    "CreateCollectionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateCollectionLambdaVersionzloaEtS8OGee4NMIcsVSLGtoeBjPTjJyOjTxHviwk"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-CreateCollectionLambdaFunctionQualifiedArn"
      }
    },
    "GetCollectionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCollectionsLambdaVersion2uHM1zbVt06VpIInVbeUlim5vWiFfg86nZgrkhNIAQ"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-GetCollectionsLambdaFunctionQualifiedArn"
      }
    },
    "AuthLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthLambdaVersionqbFIv5rYupkuXfnpVWjLMbF7Q7nMfZypBv0ONEu3K4I"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-AuthLambdaFunctionQualifiedArn"
      }
    },
    "CreateCollectedItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateCollectedItemLambdaVersion2wLrXfR6cLbu6q2t2EX4DNMlgZ8CTRRSN3E12blXLM"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-CreateCollectedItemLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCollectionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCollectionLambdaVersionnZR2LXmdvRL5xicS4kELWJ378DAnvSGK9nI5WoM8I8"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-UpdateCollectionLambdaFunctionQualifiedArn"
      }
    },
    "DeleteCollectedItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteCollectedItemLambdaVersionYZbwJUOBBstn8VqhPxWTdGN8HnXqp0dDVbfFa2VM"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-DeleteCollectedItemLambdaFunctionQualifiedArn"
      }
    },
    "GetCollectedItemsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCollectedItemsLambdaVersionkuRYaucxIQPPR2TvEzTD5XsknOWfT7tM6kV1z2jpksQ"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-GetCollectedItemsLambdaFunctionQualifiedArn"
      }
    },
    "GetCollectedItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCollectedItemLambdaVersionk77wkRxJ91IOqSb05ueD3nNGyywyngB3mnXXheiNc"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-GetCollectedItemLambdaFunctionQualifiedArn"
      }
    },
    "UpdateCollectedItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateCollectedItemLambdaVersionRL7HPNkMw48FMTn49FL7EcSy1aTqQHBafDStf3EA4c"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-UpdateCollectedItemLambdaFunctionQualifiedArn"
      }
    },
    "GenerateUploadUrlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GenerateUploadUrlLambdaVersionubwU10JOaRyIKijvKFZkUPdQ60AKh6aTRlVNYuBggl8"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-GenerateUploadUrlLambdaFunctionQualifiedArn"
      }
    },
    "DeleteCollectionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteCollectionLambdaVersiontCPmfrhev9Uvg7eKAqS07KEayNTNceVT1sIVflI"
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-DeleteCollectionLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-cool-collections-tracker-dev-ServiceEndpoint"
      }
    }
  }
}